# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: frontend-app                    # set this to your Amazon ECR repository name

permissions:
  contents: read
  id-token: write
  

jobs:
  build-and-synk:

    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      #- name: SonarCloud Scan
      #  uses: sonarsource/sonarcloud-github-action@master
      #  env:
      #      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       # with:
       #   args: >
       #       -Dsonar.organization=aniex-labs
       #       -Dsonar.projectKey=nexuspro-dashboard
             # -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: configure aws credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::654654560428:role/test-github-oidc
          role-session-name: githubrolesession
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Snyk to check Docker images for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          args: --severity-threshold=high
